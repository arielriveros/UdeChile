#lang play
(require math/flonum)

#|
Complete sus datos personales:
NOMBRE Y APELLIDO: Ariel Riveros
RUT: 19.528.980-8
|#

;; Parte a)

#|
<CFraction> ::= (simple <value>)
             |  (compound <value> <value> <CFraction>)
|#
(deftype CFraction
  (simple num)
  (compound num1 num2 comp))

;; Parte b)
;; eval :: CFraction -> Rational
;; evalua una fraccion continua a su valor racional representativo
(define (eval cFrac)
  (match cFrac
   [(simple n) n]
   [(compound n1 n2 c) (+ n1 (/ n2 (eval c)))]
;;   [(compound n1 n2 c) (lambda (x) (+ n1 (/ n2 (eval x)))) c]
    )
 )


;; Parte c)
;; degree ::  CFraction -> Integer
;; entrega el grado de la fraccion continua
(define (degree cFrac)
  (match cFrac
    [(simple _) 0]
    [(compound _ _ c) (+ 1 (degree c))]
    )
  )


;; Parte d)
;; fold :: (Integer -> A) (Integer Integer A -> A) -> (CFraction -> A)
(define (fold f g)
  (lambda (cFrac)
    (match cFrac
      [(simple num) (f num)]
      [(compound n1 n2 c) (g n1 n2 ((fold f g) c))]
      )
    )
  )


;; Parte e)
;; eval2 :: CFraction -> Rational
(define eval2
  (fold identity (lambda (n1 n2 x) (+ n1 (/ n2 x)))))

;; degree2 ::  CFraction -> Integer
(define degree2
  (fold (lambda (x) (* x 0)) (lambda (n1 n2 x) (+ x 1)))
  )


;; Parte f)
;; mysterious-cf :: Integer -> CFraction

(define (mysterious-cf n)
  ((lambda (cFrac)
     (match cFrac
       [(simple num) (simple 3)]
       [(compound n1 n2 c) (compound 3 n2 c)]
       )
     ) (mysterious-aux n))
  )

;; mysterious-aux es una función auxiliar, calcula las secuencias correctamente a partir de n=1
;; mysterious-cf corrige para n=0 y n=1
(define (mysterious-aux n [m 1])
  (cond
     [(< n 0) (error "Error:argumento negativo")]
     [(= n 0) (simple 6)]
     [else (compound 6 (expt (sub1 (* m 2)) 2) (mysterious-aux (sub1 n) (add1 m)))]
     )
  )


;; Parte g)
;; from-to :: Integer -> Integer -> listOf Integer
(define (from-to n0 nf)
  (range n0 (add1 nf))
  )

;; mysterious-list :: Integer -> listOf Float
(define (mysterious-list n)
  (map fl (map eval (map mysterious-cf (from-to 0 n))))
  )

;; A que numero tiende (mysterious-cf k) cuando k tiende a infinito?
;; Tiende a π


;; Parte h)
;; rac-to-cf :: Rational -> CFraction
(define (rac-to-cf rat)
  (let ([a (floor rat)]
        [b (expt (- rat (floor rat)) -1)]
        )
    (cond
      [(< b 0) (simple 1)]
      [else (compound a 1 (rac-to-cf b))]
      )
   )
)


